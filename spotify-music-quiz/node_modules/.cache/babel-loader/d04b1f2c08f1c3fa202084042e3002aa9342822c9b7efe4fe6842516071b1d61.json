{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\spotify-music-quiz\\\\spotify-music-quiz\\\\src\\\\Login.js\";\nimport React, { Component } from 'react';\nimport data from './quiz';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar client_id = 'c247a859f84d42f1bb843f6b8882b425'; // Your client id\nvar client_secret = '9ae9b6d4498045df8121c3eb9836465a'; // Your secret\nvar redirect_uri = 'http://localhost:3000/game'; // Your redirect uri\n\n// log in\n\nexport class Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex != 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n  getRandomSong() {\n    var idx = Math.floor(Math.random() * this.songkeys.length);\n    var rankey = this.songkeys[idx];\n    return this.data[0][rankey];\n  }\n  generateAnswers(type) {\n    let ansType = type;\n\n    // get the answer\n    let answer = this.getRandomSong();\n\n    // get random songs, making sure that there are no repeats and the options are discrete\n    let songs = [answer.album.name];\n    let answers = [];\n    let numSongs = 0;\n    switch (ansType) {\n      case \"album\":\n        answers.push(answer.album.name);\n        this.answer = answer.album.name;\n    }\n    while (numSongs < 4) {\n      var song = this.getRandomSong();\n      let checkAns;\n      switch (ansType) {\n        case \"album\":\n          checkAns = song.album.name;\n      }\n      if (!songs.includes(song) && !answers.includes(checkAns)) {\n        songs.push(song.album.name);\n        answers.push(checkAns);\n        numSongs++;\n      }\n    }\n    this.setState({\n      answerLabel: answer.name,\n      options: this.shuffle(songs)\n    });\n  }\n  handleClick(idx) {\n    console.log(idx, this.state.options[idx], this.answer);\n    let currPts;\n    if (this.state.options[idx] === this.answer) {\n      currPts = this.state.points + 10;\n\n      // TODO: make ding\n    } else {\n      currPts = this.state.points - 10;\n      // TODO: make womp womp\n    }\n\n    this.setState({\n      points: currPts\n    });\n  }\n  SignIn() {\n    //TODO connect to spotify\n    // redirect to spotify for login\n\n    // your application requests authorization\n    var scope = 'user-read-currently-playing user-read-private user-read-email user-top-read user-read-recently-played user-library-read playlist-read-private';\n    var url = 'https://accounts.spotify.com/authorize';\n    url += '?response_type=token';\n    url += '&client_id=' + encodeURIComponent(client_id);\n    url += '&scope=' + encodeURIComponent(scope);\n    url += '&redirect_uri=' + encodeURIComponent(redirect_uri);\n    redirect(url);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.SignIn();\n        },\n        children: \"Sign in to Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionNum: 0\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(Question, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","data","client_id","client_secret","redirect_uri","Login","constructor","props","state","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","getRandomSong","idx","songkeys","rankey","generateAnswers","type","ansType","answer","songs","album","name","answers","numSongs","push","song","checkAns","includes","setState","answerLabel","options","handleClick","console","log","currPts","points","SignIn","scope","url","encodeURIComponent","redirect","render","Game","questionNum"],"sources":["D:/Development/spotify-music-quiz/spotify-music-quiz/src/Login.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport data from './quiz';\r\n\r\nvar client_id = 'c247a859f84d42f1bb843f6b8882b425'; // Your client id\r\nvar client_secret = '9ae9b6d4498045df8121c3eb9836465a'; // Your secret\r\nvar redirect_uri = 'http://localhost:3000/game'; // Your redirect uri\r\n\r\n// log in\r\n\r\nexport class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    state = {\r\n\r\n    }\r\n\r\n    shuffle(array) {\r\n        let currentIndex = array.length,  randomIndex;\r\n      \r\n        // While there remain elements to shuffle.\r\n        while (currentIndex != 0) {\r\n      \r\n          // Pick a remaining element.\r\n          randomIndex = Math.floor(Math.random() * currentIndex);\r\n          currentIndex--;\r\n      \r\n          // And swap it with the current element.\r\n          [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n        }\r\n      \r\n        return array;\r\n    }\r\n\r\n    getRandomSong() {\r\n        var idx = Math.floor(Math.random() * this.songkeys.length);\r\n        var rankey = this.songkeys[idx];\r\n        return this.data[0][rankey];\r\n    }\r\n\r\n    generateAnswers(type) {\r\n        let ansType = type;\r\n\r\n        // get the answer\r\n        let answer = this.getRandomSong();\r\n\r\n        // get random songs, making sure that there are no repeats and the options are discrete\r\n        let songs = [answer.album.name];\r\n        let answers = [];\r\n        let numSongs = 0;\r\n\r\n        switch(ansType) {\r\n            case \"album\":\r\n                answers.push(answer.album.name);\r\n                this.answer = answer.album.name;\r\n        }\r\n\r\n        while (numSongs < 4) {\r\n            var song = this.getRandomSong();\r\n            let checkAns;\r\n\r\n            switch(ansType) {\r\n                case \"album\":\r\n                    checkAns = song.album.name;\r\n            }\r\n\r\n            if (!songs.includes(song) && !answers.includes(checkAns)) {\r\n                songs.push(song.album.name);\r\n                answers.push(checkAns);\r\n                numSongs++;\r\n            }\r\n        }\r\n\r\n        this.setState({answerLabel: answer.name, options: this.shuffle(songs)});\r\n    }\r\n\r\n    handleClick(idx) {\r\n        console.log(idx, this.state.options[idx], this.answer);\r\n        let currPts;\r\n\r\n        if (this.state.options[idx] === this.answer) {\r\n            currPts = this.state.points + 10;\r\n        \r\n            // TODO: make ding\r\n        } else {\r\n            currPts = this.state.points - 10;     \r\n            // TODO: make womp womp\r\n        }\r\n        this.setState({points: currPts});\r\n\r\n    }\r\n\r\n    SignIn(){\r\n        //TODO connect to spotify\r\n        // redirect to spotify for login\r\n      \r\n        // your application requests authorization\r\n        var scope = 'user-read-currently-playing user-read-private user-read-email user-top-read user-read-recently-played user-library-read playlist-read-private';\r\n        var url = 'https://accounts.spotify.com/authorize';\r\n        url += '?response_type=token';\r\n        url += '&client_id=' + encodeURIComponent(client_id);\r\n        url += '&scope=' + encodeURIComponent(scope);\r\n        url += '&redirect_uri=' + encodeURIComponent(redirect_uri);\r\n      \r\n        redirect(url);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={() => {this.SignIn()}}>Sign in to Spotify</button>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            questionNum: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <Question />\r\n                {/* {Object.keys(songs[0])} */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}